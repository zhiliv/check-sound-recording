import { defineStore } from 'pinia'
import { Query } from '~/types/query'

/**
 * @interface QueryParams
 * @member {Number} offset - –°–¥–≤–∏–≥ –∑–∞–ø–∏—Å–µ–π
 * @member {Number} limit - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
 * @member {Object} where - –£—Å–ª–æ–≤–∏—è –æ—Ç–±–æ—Ä–∞ –∑–∞–ø–∏—Å–∏
 * @member {String} order - –ü–æ–ª–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
 */
type SelectParams = {
  offset?: number | any
  limit?: number | any
  where?: any
  order?: string
}

export const useRecordStore = defineStore('records', () => {
  const list = ref<any>([]) // –°–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫ —Ç–∞–±–ª–∏—Ü—ã
  const count = ref<number>(0) // –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
  const loading = ref<boolean>(true) // –°—Ç–∞—Ç—É—Å –∑–∞–≥—Ä—É–∑–∫–∏
  const error = ref<any>(true) // –î–∞–Ω–Ω—ã–µ –æ–± –æ—à–∏–±–∫–µ
  const limit = ref<number>(50) // –õ–∏–º–∏—Ç –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–æ–∫
  const offset = ref<number>(0) // –°–¥–≤–∏–≥
  const selectParams = ref<SelectParams>({ offset, limit, order: JSON.stringify([]) }) // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
  const where = ref<any>({}) // –£—Å–ª–æ–≤–∏—è –æ—Ç–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
  const filterCondition = ref<any>() // –î–∞–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
  const table = ref<string>('records') // –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏(—Ç–∞–±–ª–∏—Ü—ã)

  /**
   * –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ —É—Å–ª–æ–≤–∏–π –æ—Ç–±–æ—Ä–∞
   * @function setFilter
   * @param {String} key - –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∫–ª—é—á–∞ —É—Å–ª–æ–≤–∏–π –æ—Ç–±–æ—Ä–∞
   * @param {String} value - –ó–Ω–∞—á–µ–Ω–∏–µ —É—Å–ª–æ–≤–∏–π –æ—Ç–±–æ—Ä–∞
   * @param {String} filterCondition - —Ç–∏–ø —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
   */
  async function setFilter(key: string, value: any, filterCondition: string) {
    if(!value) delete where.value[key]
    // –£–¥–∞–ª—è–µ–º –∏–∑ –æ–±—ä–µ–∫—Ç–∞ —Å–≤–æ–π—Å—Ç–≤–æ, –µ—Å–ª–∏ –ø–æ–ª–µ –ø–æ–∏—Å–∫–∞ –ø—É—Å—Ç–æ–µ

    else {
      let typeFilter: string // –ó–Ω–∞—á–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞
      if(filterCondition === '>') typeFilter = '>'
      else if(filterCondition === '<') typeFilter = '<'
      else if(filterCondition === '%') typeFilter = 'LIKE'
      else if(filterCondition === '=') typeFilter = '='
      else typeFilter = '='
      where.value[key] = { type: typeFilter, value }
    }

    await getList()
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
   * @function getList
   * @param {String} _url - –°—Å—ã–ª–∫–∞ –¥–ª—è api
   */
  async function getList() {
    let url = `/api/records/all?limit=${selectParams.value.limit}&offset=${selectParams.value.offset}&order=${selectParams.value.order}&table=${table.value}`
    if(!checkEmptyObject(where.value)) url += `&where=${JSON.stringify(where.value)}`
    try {
      loading.value = true
      const paramsQuery: Query = {
        url, // TODO –¥–æ–±–∞–≤–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        method: 'get'
      }
      let response: any = await query(paramsQuery) // –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ
      await getCount()
      
      list.value = Array.isArray(response.data.value) ? response.data.value  :  []  // –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ
    } catch(err: any) {
      error.value = err.value ? true : false // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ—à–∏–±–∫–∏
      err.value ? showToast({ message: err.value.data.message, type: 'error' }) : (loading.value = false)
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø–∏—Å–µ–π
   * @function getCount
   * @param {String} _url - –°—Å—ã–ª–∫–∞ –¥–ª—è api
   */
  async function getCount() {
    let url = !checkEmptyObject(where.value) ? `/api/records/count?where=${JSON.stringify(where.value)}&table=${table.value}` : `/api/records/count?table=${table.value}` // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
    try {
      const paramsQuery: Query = {
        url, // TODO –¥–æ–±–∞–≤–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        method: 'get'
      }
      let response: any = await query(paramsQuery) // –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ
      count.value = response.data.value || 0 // –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ
    } catch(err: any) {
      error.value = err.value ? true : false // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ—à–∏–±–∫–∏
      err.value ? showToast({ message: err.value.data.message, type: 'error' }) : (loading.value = false)
    }
  }

  /** 
  * –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏
  * @function editRecord
  * @param {Object} data - –î–∞–Ω–Ω—ã–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
  * @param {String} _url - –°—Å—ã–ª–∫–∞ –¥–ª—è api
  */
  async function editRecord(data: any) {
    console.log('üöÄ -> editRecord -> data:', data)
    data.table = table.value // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –∏–º–µ–Ω–∏ —Ç–∞–±–ª–∏—Ü—ã
    const paramsQuery: Query = { url: `/api/records/edit`, method: 'post', body: data } // –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
    try {
      let response: any = await query(paramsQuery) // –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
      await getList()
      return response.data
    }
    catch(err: any) {
      error.value = err?.value ? true : false // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ—à–∏–±–∫–∏
      showToast({ message: err?.value?.data?.message || err, type: 'error' })
    }
  }

  /** 
  * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–∏ 
  * @function getRecord
  * @param {Number} id - –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏
  * @param {String} _url - –°—Å—ã–ª–∫–∞ –¥–ª—è api
  */
  async function getRecord(id: number) {
    const paramsQuery: Query = { url: `/api/records/record?id=${id}&table=${table.value}`, method: 'get' } // –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
    try {
      let response: any = await query(paramsQuery) // –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
      return response.data
    }
    catch(err: any) {
      error.value = err.value ? true : false // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ—à–∏–±–∫–∏
      showToast({ message: err.value.data.message, type: 'error' })
    }
  }

  /** 
  * –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏
  * @function deleteRecord
  * @param {Object} data - –î–∞–Ω–Ω—ã–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
  * @param {String} _url - –°—Å—ã–ª–∫–∞ –¥–ª—è api
  */
  async function deleteRecord(data: any) {
    data.table = table.value // –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
    const paramsQuery: Query = { url: `/api/records/delete`, method: 'delete', body: data } // –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
    try {
      let response: any = await query(paramsQuery) // –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ
      await getList()
      return response.data
    }
    catch(err: any) {
      error.value = err.value ? true : false // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ—à–∏–±–∫–∏
      showToast({ message: err.value.data.message, type: 'error' })
    }
  }
  
  async function loadData(){
    const paramsQuery: Query = { url: `/api/records/loadData`, method: 'post' } // –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
    try {
      let response: any = await query(paramsQuery) // –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ
      
      return response.data
    }
    catch(err: any) {
      error.value = err.value ? true : false // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ—à–∏–±–∫–∏
      showToast({ message: err.value.data.message, type: 'error' })
    }
  }
  


  return { list, loading, error, getList, setFilter, getCount, count, limit, offset, filterCondition, getRecord, editRecord, deleteRecord, table, loadData}
})
